        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:**Author: Kevin Allen
        -:    3:**CS372
        -:    4:**Description:  Unit test of the getCost function
        -:    5:*****************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <limits.h>
        -:   11:#include <stdio.h>
        -:   12:
function main called 1 returned 100% blocks executed 69%
        1:   13:int main() {
        -:   14:
        1:   15:	int minCard =0;   //minimum vaild card entry
        1:   16:	int maxCard = 26;  //maximum valid card entry
        1:   17:	int over = 27;		// value too high, should return -1
        1:   18:	int under = -1;		//value too low, should return -1
        -:   19:
        -:   20:	//cards selected to cover all expected return values, 0 covered by minCard, 4 covered by maxCard
        1:   21:	int cardVal2 = 1; //estate
        1:   22:	int cardVal3 = 20; //ambassador
        1:   23:	int cardVal5 = 19;  //tribute
        1:   24:	int cardVal6 = 6;  //gold
        1:   25:	int cardVal8 = 3;  //province
        -:   26:
        1:   27:	if (getCost(minCard) != 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   28:		printf("minCard test failed");
call    0 never executed
        -:   29:	}
        -:   30:
        1:   31:	if (getCost(maxCard) != 4) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   32:		printf("maxCard test failed");
call    0 never executed
        -:   33:	}
        -:   34:
        1:   35:	if (getCost(over) != -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   36:		printf("over test failed");
call    0 never executed
        -:   37:	}
        -:   38:
        1:   39:	if (getCost(under) != -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   40:		printf("under test failed");
call    0 never executed
        -:   41:	}
        -:   42:
        1:   43:	if (getCost(INT_MAX) != -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   44:		printf("max int test failed");
call    0 never executed
        -:   45:	}
        -:   46:
        1:   47:	if (getCost(INT_MIN) != -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   48:		printf("min int test failed");
call    0 never executed
        -:   49:	}
        -:   50:
        1:   51:	if (getCost(cardVal2) != 2) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   52:		printf("cardVal2 test failed");
call    0 never executed
        -:   53:	}
        -:   54:
        1:   55:	if (getCost(cardVal3) != 3) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   56:		printf("cardVal3 test failed");
call    0 never executed
        -:   57:	}
        -:   58:
        1:   59:	if (getCost(cardVal5) != 5) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   60:		printf("cardVal5 test failed");
call    0 never executed
        -:   61:	}
        -:   62:
        1:   63:	if (getCost(cardVal6) != 6) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   64:		printf("cardVal6 test failed");
call    0 never executed
        -:   65:	}
        -:   66:
        1:   67:	if (getCost(cardVal8) != 8) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:		printf("cardVal8 test failed");
call    0 never executed
        -:   69:	}
        -:   70:
        1:   71:	printf("Testing complete\n");
call    0 returned 100%
        1:   72:	return 0;
        -:   73:}
